// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  name String
  email String @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  role Role @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  bookings Booking[]
  subscription Subscription?
  accounts Account[]
  sessions Session[]
  teacher Teacher?
}

enum Role {
  CLIENT
  TEACHER
  ADMIN
  SUPER_ADMIN
}

model Course {
  id String @id @default(cuid())
  title String
  description String @db.Text
  price Decimal @db.Decimal(10, 2)
  duration Int // en minutes
  capacity Int
  level Level
  imageUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  schedules Schedule[]
  bookings Booking[]
  teacherId String
  teacher Teacher @relation(fields: [teacherId], references: [id])
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL_LEVELS
}

model Teacher {
  id String @id @default(cuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio String @db.Text
  specialties String[]
  rating Float?
  
  // Relations
  courses Course[]
  schedules Schedule[]
}

model Schedule {
  id String @id @default(cuid())
  startTime DateTime
  endTime DateTime
  recurring Boolean @default(false)
  recurrenceRule String?
  
  // Relations
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacherId String
  teacher Teacher @relation(fields: [teacherId], references: [id])
  bookings Booking[]
}

model Booking {
  id String @id @default(cuid())
  status BookingStatus @default(CONFIRMED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  scheduleId String
  schedule Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  courseId String
  course Course @relation(fields: [courseId], references: [id])
  payment Payment?
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Payment {
  id String @id @default(cuid())
  amount Decimal @db.Decimal(10, 2)
  currency String @default("EUR")
  status PaymentStatus
  stripeId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  bookingId String? @unique
  booking Booking? @relation(fields: [bookingId], references: [id])
  subscriptionId String? @unique
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Subscription {
  id String @id @default(cuid())
  status SubscriptionStatus
  startDate DateTime
  endDate DateTime?
  stripeId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId String
  plan Plan @relation(fields: [planId], references: [id])
  payment Payment?
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  PAUSED
}

model Plan {
  id String @id @default(cuid())
  name String
  description String
  price Decimal @db.Decimal(10, 2)
  duration Int // en jours
  features String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  subscriptions Subscription[]
}

// NextAuth.js Models
model Account {
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(cuid())
  sessionToken String @unique
  userId String
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token String @unique
  expires DateTime
  
  @@unique([identifier, token])
}