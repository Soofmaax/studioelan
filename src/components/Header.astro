---
interface Props {
  lang: 'fr' | 'en';
}

const { lang } = Astro.props;

// Navigation links with translations
const navLinks = {
  fr: [
    { href: '#about', text: 'À propos' },
    { href: '#services', text: 'Services' },
    { href: '#contact', text: 'Contact' },
  ],
  en: [
    { href: '#about', text: 'About' },
    { href: '#services', text: 'Services' },
    { href: '#contact', text: 'Contact' },
  ],
};

// Get the right translation based on language
const links = navLinks[lang];
---

<header class="fixed w-full bg-transparent transition-all duration-300 z-40" id="main-header">
  <div class="container mx-auto px-4 py-4 md:py-6 flex justify-between items-center">
    <a href={`/${lang}/`} class="flex items-center space-x-2">
      <span class="font-serif text-2xl font-bold text-primary-700 dark:text-primary-300 transition-colors duration-300">
        Studio Élan
      </span>
    </a>
    
    <!-- Desktop Navigation -->
    <nav class="hidden md:block">
      <ul class="flex items-center space-x-8">
        {links.map((link) => (
          <li>
            <a 
              href={link.href} 
              class="text-gray-700 dark:text-gray-200 hover:text-primary-600 dark:hover:text-primary-300 transition-colors duration-300"
            >
              {link.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>
    
    <!-- Mobile Menu Button -->
    <button 
      id="mobile-menu-button" 
      class="md:hidden flex items-center text-gray-700 dark:text-gray-200 p-2 focus:outline-none" 
      aria-label="Toggle menu"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
    </button>
  </div>
  
  <!-- Mobile Navigation Menu (Hidden by default) -->
  <div id="mobile-menu" class="md:hidden hidden bg-white dark:bg-gray-800 shadow-lg rounded-b-lg mx-4 transition-all duration-300 ease-in-out opacity-0">
    <nav class="py-4">
      <ul class="flex flex-col space-y-4 px-4">
        {links.map((link) => (
          <li>
            <a 
              href={link.href} 
              class="block py-2 text-gray-700 dark:text-gray-200 hover:text-primary-600 dark:hover:text-primary-300 transition-colors duration-300"
            >
              {link.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </div>
</header>

<script>
  // Header scroll behavior
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.getElementById('main-header');
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    // Header scroll effect
    window.addEventListener('scroll', () => {
      if (window.scrollY > 100) {
        header.classList.remove('bg-transparent');
        header.classList.add('bg-white/90', 'dark:bg-gray-900/90', 'backdrop-blur-md', 'shadow-md');
      } else {
        header.classList.remove('bg-white/90', 'dark:bg-gray-900/90', 'backdrop-blur-md', 'shadow-md');
        header.classList.add('bg-transparent');
      }
    });
    
    // Initial check for scroll position
    if (window.scrollY > 100) {
      header.classList.add('bg-white/90', 'dark:bg-gray-900/90', 'backdrop-blur-md', 'shadow-md');
    }
    
    // Mobile menu toggle
    mobileMenuButton.addEventListener('click', () => {
      const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
      
      mobileMenuButton.setAttribute('aria-expanded', !isExpanded);
      
      if (isExpanded) {
        // Close menu
        mobileMenu.classList.add('opacity-0');
        setTimeout(() => {
          mobileMenu.classList.add('hidden');
        }, 300);
      } else {
        // Open menu
        mobileMenu.classList.remove('hidden');
        setTimeout(() => {
          mobileMenu.classList.remove('opacity-0');
        }, 10);
      }
    });
    
    // Close mobile menu when clicking on a link
    const mobileLinks = mobileMenu.querySelectorAll('a');
    mobileLinks.forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu.classList.add('opacity-0');
        setTimeout(() => {
          mobileMenu.classList.add('hidden');
        }, 300);
        mobileMenuButton.setAttribute('aria-expanded', 'false');
      });
    });
  });
</script>